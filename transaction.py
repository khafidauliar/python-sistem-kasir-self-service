# -*- coding: utf-8 -*-
"""transaction v2.0

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16QBNcS2Zpi3x3z8f4A1GD-qlnnOSSApB
"""

# transaction.py
# import library yang digunakan
import pandas as pd

class Transaction:
  def __init__(self):
    '''
    fungsi untuk inisiasi dictionary kosong untuk menyimpan data transaksi
    '''
    self.data_trx = dict()

  
  def add_item(self):
    '''
    fungsi untuk menambahkan data transaksi
    parameters:
    nama_item       : str   nama item yang ingin dibeli
    jumlah_item     : int   jumlah item yang ingin dibeli
    harga_per_item  : int   harga satuan per item yang dibeli

    ValueError:
    Jika parameter nama_item bukan string
    Jika parameter jumlah_item bukan integer
    Jika parameter harga_item bukan integer
    '''
    # input nama item
    nama_item = input('Masukkan nama item : ')

    # looping sampai input berupa angka
    while True:
      try:
          # input jumlah item
          jumlah_item = int(input('Masukkan jumlah item : '))
      except ValueError:
          print ("Input harus angka!")
      else:
          break

    # looping sampai input berupa angka
    while True:
      try:
          # input harga per item
          harga_per_item = int(input('Masukkan harga item : '))
      except ValueError:
          print ("Input harus angka!")
      else:
          break

    # total harga = jumlah item x harga per item
    total_harga = jumlah_item * harga_per_item

    # menambahkan data transaksi ke dalam dictionary  
    self.data_trx.update({nama_item: [jumlah_item, harga_per_item, total_harga]})

    # cetak transaksi yang dibeli
    print("")
    print("Item yang dibeli adalah:")
    print(f"Nama item     : {nama_item}")
    print(f"Jumlah item   : {jumlah_item}")
    print(f"Harga per item: Rp{(harga_per_item):,}")


  def update_item_name(self, nama_item, update_nama_item):
    '''
    fungsi untuk memperbarui nama item
    parameters
    nama_item         : str   nama item yang diproses
    update_nama_item  : str   nama item yang telah diperbarui

    TypeError:
    Jika parameter nama_item bukan string
    Jika parameter update_nama_item bukan string
    '''
    # tipe data nama item harus str, jika tidak menampilkan pesan TypeError
    if type(nama_item) != str:
      raise TypeError(
          "Parameter 'nama_item' harus menggunakan tipe data 'str'"
      )
    # tipe data update nama item harus str, jika tidak menampilkan pesan TypeError
    elif type(update_nama_item) != str:
      raise TypeError(
          "Parameter 'update_nama_item' harus menggunakan tipe data 'str'"
      )
    else:
      try:
        # memperbarui nama item
        self.data_trx[update_nama_item] = self.data_trx.pop(nama_item)
        print(f"Anda merubah item {nama_item} menjadi {update_nama_item}")
        print("")

      except:
        # menampilkan pesan apabila nama item tidak sesuai 
        print(f"Item {nama_item} tidak ditemukan dalam keranjang Anda")


  def update_item_qty(self, nama_item, update_jumlah_item):
    """
    fungsi untuk memperbarui kuantitas item
    parameters
    nama_item           : str  nama item yang diproses 
    update_jumlah_item  : int  kuantitas item yang diperbarui

    TypeError:
    Jika parameter nama_item bukan string
    Jika parameter jumlah_item bukan integer
    """
    if type(nama_item) != str:
      raise TypeError(
          "Parameter 'nama_item' harus menggunakan tipe data 'str'"
      )
    elif type(update_jumlah_item) != int:
      raise TypeError(
          "Parameter 'update_jumlah_item' harus menggunakan tipe data 'int'"
      )
    else:
      try:
        # update jumlah item
        self.data_trx[nama_item][0] = update_jumlah_item
        print(f"Anda merubah jumlah item {nama_item} menjadi {update_jumlah_item}")
        print("")       

        # update total harga 
        self.data_trx[nama_item][2] = update_jumlah_item * self.data_trx[nama_item][1]

      except:
        # menampilkan pesan apabila nama item tidak sesuai
        print(f"Item {nama_item} tidak ditemukan dalam keranjang Anda")


  def update_item_price(self, nama_item, update_harga_item):
    """
    fungsi untuk memperbarui harga item
    parameters
    nama_item          : str  nama item yang diproses 
    update_harga_item  : int  harga item yang diperbarui

    TypeError:
    Jika parameter nama_item bukan string
    Jika parameter harga_item bukan float atau integer
    """
    if type(nama_item) != str:
      raise TypeError(
          "Parameter 'nama_item' harus menggunakan tipe data 'str'"
      )
    elif type(update_harga_item) != int and type(update_harga_item) != float:
      raise TypeError(
          "Parameter 'update_harga_item' harus menggunakan tipe data 'int' atau 'float'"
      )
    else:
      try:
        # update harga item
        self.data_trx[nama_item][1] = update_harga_item 

        # update total harga 
        self.data_trx[nama_item][2] = update_harga_item * self.data_trx[nama_item][0]
        print(f"Anda merubah harga item {nama_item} menjadi {(update_harga_item):,}")
        print("")  

      except:
        # menampilkan pesan apabila nama item tidak sesuai
        print(f"Item {nama_item} tidak ditemukan dalam keranjang Anda")


  def delete_item(self, nama_item):
    """
    fungsi untuk menghapus salah satu item yang ada di dalam keranjang
    parameters
    nama_item           : str  nama item yang dihapus

    return
    list item yang telah diperbarui
    """
    if type(nama_item) != str:
      raise TypeError(
          "Parameter 'nama_item' harus menggunakan tipe data 'str'"
      )
    else:    
      try:
        # hapus item tertentu
        self.data_trx.pop(nama_item)
        print(f"Anda telah berhasil menghapus item {nama_item}")

      # menampilkan pesan apabila nama item tidak sesuai
      except:
        print(f"Item {nama_item} tidak ditemukan dalam keranjang Anda")


  def reset_transaction(self):
    """
    fungsi untuk menghapus semua item yang ada di dalam keranjang

    return
    pesan : str seluruh item telah berhasil dihapus
    """
    # hapus semua item
    self.data_trx.clear()
    print("Seluruh item telah berhasil dihapus")


  def check_order(self):
    # jika data dalam dict kosong maka akan print informasi keranjang anda kosong
    if(len(self.data_trx) == 0):
      print('Keranjang Anda kosong!')
    # jika terdapat data maka akan print rincian daftar transaksi yang telah dipesan 
    else:
      data = pd.DataFrame(self.data_trx).T
      data.index.name = "Nama Item"
      data.columns = ["Jumlah Item", "Harga/Item", " Total Harga"]
      print(data.to_markdown()) 


  def total_price(self):
    """
    fungsi untuk menghitung total harga yang telah dipesan dan diskon apabila sesuai persyaratan
    """
    # menghitung total harga dalam keranjang
    total = 0
    for key, val in self.data_trx.items():
      total += self.data_trx[key][2]
        
    # persyaratan diskon
    if total >= 0 and total <= 200_000:
      print(f"Total belanja Anda adalah Rp{(total):,}")
    elif total > 200_000 and total <= 300_000:
      total_setelah_diskon = total * 0.95
      print(f"Total transaksi Anda setelah diskon 5% adalah Rp{int(total_setelah_diskon):,}")
    elif total > 300_000 and total <= 500_000:
      total_setelah_diskon = total * 0.92
      print(f"Total belanja Anda setelah diskon 8% adalah Rp{int(total_setelah_diskon):,}")
    elif total > 500_000:
      total_setelah_diskon = total * 0.90
      print(f"Total belanja Anda setelah diskon 10% adalah Rp{int(total_setelah_diskon):,}")
    else:
      print(f"Total belanja tidak boleh negatif")